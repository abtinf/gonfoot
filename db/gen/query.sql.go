// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"
)

const createFoo = `-- name: CreateFoo :one
INSERT INTO foo (foo, bar) VALUES (?, ?) RETURNING id, foo, bar
`

type CreateFooParams struct {
	Foo string
	Bar sql.NullInt64
}

func (q *Queries) CreateFoo(ctx context.Context, arg CreateFooParams) (Foo, error) {
	row := q.db.QueryRowContext(ctx, createFoo, arg.Foo, arg.Bar)
	var i Foo
	err := row.Scan(&i.ID, &i.Foo, &i.Bar)
	return i, err
}

const getFoo = `-- name: GetFoo :one
SELECT id, foo, bar FROM foo WHERE id = ?
`

func (q *Queries) GetFoo(ctx context.Context, id int64) (Foo, error) {
	row := q.db.QueryRowContext(ctx, getFoo, id)
	var i Foo
	err := row.Scan(&i.ID, &i.Foo, &i.Bar)
	return i, err
}

const listFoos = `-- name: ListFoos :many
SELECT id, foo, bar FROM foo
`

func (q *Queries) ListFoos(ctx context.Context) ([]Foo, error) {
	rows, err := q.db.QueryContext(ctx, listFoos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Foo
	for rows.Next() {
		var i Foo
		if err := rows.Scan(&i.ID, &i.Foo, &i.Bar); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
