// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: api.proto

package proto

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	API_StartupProbe_FullMethodName   = "/tinplate.API/StartupProbe"
	API_LivenessProbe_FullMethodName  = "/tinplate.API/LivenessProbe"
	API_ReadinessProbe_FullMethodName = "/tinplate.API/ReadinessProbe"
	API_ExampleGet_FullMethodName     = "/tinplate.API/ExampleGet"
	API_ExamplePost_FullMethodName    = "/tinplate.API/ExamplePost"
	API_Download_FullMethodName       = "/tinplate.API/Download"
	API_GetMigrations_FullMethodName  = "/tinplate.API/GetMigrations"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	StartupProbe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LivenessProbe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadinessProbe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExampleGet(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleReply, error)
	ExamplePost(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleReply, error)
	Download(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (API_DownloadClient, error)
	GetMigrations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MigrationList, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) StartupProbe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, API_StartupProbe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) LivenessProbe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, API_LivenessProbe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ReadinessProbe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, API_ReadinessProbe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ExampleGet(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleReply, error) {
	out := new(ExampleReply)
	err := c.cc.Invoke(ctx, API_ExampleGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ExamplePost(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (*ExampleReply, error) {
	out := new(ExampleReply)
	err := c.cc.Invoke(ctx, API_ExamplePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Download(ctx context.Context, in *ExampleRequest, opts ...grpc.CallOption) (API_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], API_Download_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_DownloadClient interface {
	Recv() (*httpbody.HttpBody, error)
	grpc.ClientStream
}

type aPIDownloadClient struct {
	grpc.ClientStream
}

func (x *aPIDownloadClient) Recv() (*httpbody.HttpBody, error) {
	m := new(httpbody.HttpBody)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetMigrations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MigrationList, error) {
	out := new(MigrationList)
	err := c.cc.Invoke(ctx, API_GetMigrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	StartupProbe(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	LivenessProbe(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ReadinessProbe(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ExampleGet(context.Context, *ExampleRequest) (*ExampleReply, error)
	ExamplePost(context.Context, *ExampleRequest) (*ExampleReply, error)
	Download(*ExampleRequest, API_DownloadServer) error
	GetMigrations(context.Context, *emptypb.Empty) (*MigrationList, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) StartupProbe(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartupProbe not implemented")
}
func (UnimplementedAPIServer) LivenessProbe(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivenessProbe not implemented")
}
func (UnimplementedAPIServer) ReadinessProbe(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadinessProbe not implemented")
}
func (UnimplementedAPIServer) ExampleGet(context.Context, *ExampleRequest) (*ExampleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExampleGet not implemented")
}
func (UnimplementedAPIServer) ExamplePost(context.Context, *ExampleRequest) (*ExampleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExamplePost not implemented")
}
func (UnimplementedAPIServer) Download(*ExampleRequest, API_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedAPIServer) GetMigrations(context.Context, *emptypb.Empty) (*MigrationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMigrations not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_StartupProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StartupProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_StartupProbe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StartupProbe(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_LivenessProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LivenessProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_LivenessProbe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LivenessProbe(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ReadinessProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ReadinessProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ReadinessProbe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ReadinessProbe(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ExampleGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ExampleGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ExampleGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ExampleGet(ctx, req.(*ExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ExamplePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ExamplePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ExamplePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ExamplePost(ctx, req.(*ExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExampleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Download(m, &aPIDownloadServer{stream})
}

type API_DownloadServer interface {
	Send(*httpbody.HttpBody) error
	grpc.ServerStream
}

type aPIDownloadServer struct {
	grpc.ServerStream
}

func (x *aPIDownloadServer) Send(m *httpbody.HttpBody) error {
	return x.ServerStream.SendMsg(m)
}

func _API_GetMigrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetMigrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetMigrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetMigrations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinplate.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartupProbe",
			Handler:    _API_StartupProbe_Handler,
		},
		{
			MethodName: "LivenessProbe",
			Handler:    _API_LivenessProbe_Handler,
		},
		{
			MethodName: "ReadinessProbe",
			Handler:    _API_ReadinessProbe_Handler,
		},
		{
			MethodName: "ExampleGet",
			Handler:    _API_ExampleGet_Handler,
		},
		{
			MethodName: "ExamplePost",
			Handler:    _API_ExamplePost_Handler,
		},
		{
			MethodName: "GetMigrations",
			Handler:    _API_GetMigrations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _API_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
